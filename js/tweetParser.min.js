/*!
 * tweetParser.js v2.1.2
 * Small Javascript Library that parse an element containing a tweet and turn URLS, @user & #hashtags into working urls
 * License : MIT
 * author Vincent Loy <vincent.loy1@gmail.com>
 * http://vincent-loy.fr
 */
!function(t){"use strict";var r,e,s;e=function(t){var r,e;for(t=t||{},r=1;r<arguments.length;r+=1)if(arguments[r])for(e in arguments[r])arguments[r].hasOwnProperty(e)&&(t[e]=arguments[r][e]);return t},s=function(t,r,e){var s=document.createElement("a");return s.href=t,s.classList.add(r),s.textContent=e,s},r=function(t,r){var a=document.querySelectorAll(t),n=e({urlClass:"tweet_link",userClass:"tweet_user",hashtagClass:"hashtag",target:"_blank",searchWithHashtags:!0,parseUsers:!0,parseHashtags:!0,parseUrls:!0},r);Array.prototype.forEach.call(a,function(t){var r,e=t.innerHTML,a=/(?:\s)(f|ht)tps?:\/\/([^\s\t\r\n<]*[^\s\t\r\n<)*_,\.])/g,u=/\B@([a-zA-Z0-9_]+)/g,c=/\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g;r=n.searchWithHashtags?"https://twitter.com/hashtag/":"https://twitter.com/search?q=",n.parseUrls&&(e=e.replace(a,function(t){var r=s(t,n.urlClass,t);return t.replace(t,r.outerHTML)})),n.parseUsers&&(e=e.replace(u,function(t){var r=t.slice(1),e="http://twitter.com/"+r,a=s(e,n.userClass,t);return t.replace(t,a.outerHTML)})),n.parseHashtags&&(e=e.replace(c,function(t){var e=t.slice(1),a=r+e,u=s(a,n.hashtagClass,t);return t.replace(t,u.outerHTML)})),t.innerHTML=e})},t.tweetParser=r}(window),window.jQuery&&!function(t,r){"use strict";function e(t,e){r(t,e)}t.fn.tweetParser=function(t){return e(this.selector,t)}}(jQuery,tweetParser);
//# sourceMappingURL=data:application/json;base64,